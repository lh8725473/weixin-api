#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('babel-core/register')
require('babel-polyfill')
var app = require('../app')
var debug = require('debug')('weixin-api:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Create sokect server.
 */

var socketApp = require('express')()
var socketServer = require('http').createServer(socketApp)
socketApp.all('*', function (req, res, next) {
  res.header('Access-Control-Allow-Origin', '*')
  res.header('Access-Control-Allow-Headers', 'enctype, Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With, x-access-token, application/x-www-form-urlencoded')
  res.header('Access-Control-Allow-Methods', 'PUT,POST,GET,DELETE,OPTIONS,HEAD')
  res.header('X-Powered-By', ' 3.2.1')
  res.header('Content-Type', 'application/x-www-form-urlencoded')
  next()
})

var io = require('socket.io')(socketServer)
io.on('connection', function (socket) {
  console.log('a user connected')
  console.log(socket.handshake.query)
  socket.on('disconnect', function () {
    console.log('user disconnected')
  })
  socket.on('chat message', function (msg) {
    console.log('message: ' + msg)
    io.emit('chat message', msg)
  })
})

socketServer.listen(6886)
socketServer.on('listening', socketServerOnListening)

function socketServerOnListening () {
  console.error('socketServer Listening on ' + 6886)
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port
  debug('Listening on ' + bind)
  console.error('Listening on ' + port)
}
